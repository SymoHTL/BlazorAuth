@page "/Account/Manage/TwoFactorAuthentication"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<StatusMessage/>
<MudText Typo="Typo.h4">Two-factor authentication (2FA)</MudText>
@if (_canTrack) {
    if (_is2FaEnabled) {
        if (_recoveryCodesLeft == 0) {
            <div class="alert alert-danger">
                <strong>You have no recovery codes left.</strong>
                <MudText>You must <MudLink href="account/manage/generateRecoveryCodes">generate a new set of recovery codes</MudLink> before you can log in with a recovery code.</MudText>
            </div>
        }
        else if (_recoveryCodesLeft == 1) {
            <div class="alert alert-danger">
                <strong>You have 1 recovery code left.</strong>
                <MudText>You can <MudLink href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.</MudText>
            </div>
        }
        else if (_recoveryCodesLeft <= 3) {
            <div class="alert alert-warning">
                <strong>You have @_recoveryCodesLeft recovery codes left.</strong>
                <MudText>You should <MudLink href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.</MudText>
            </div>
        }

        if (_isMachineRemembered) {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken/>
                <MudStaticButton Variant="Variant.Filled" Color="Color.Info">Forget this browser</MudStaticButton>
            </form>
        }

        <MudLink href="account/manage/disable2fa" class="btn btn-primary">Disable 2FA</MudLink>
        <MudLink href="account/manage/generateRecoveryCodes" class="btn btn-primary">Reset recovery codes</MudLink>
    }

    <MudText Typo="Typo.h4">Authenticator app</MudText>
    @if (!_hasAuthenticator) {
        <MudLink href="account/manage/enableAuthenticator" class="btn btn-primary">Add authenticator app</MudLink>
    }
    else {
        <MudLink href="account/manage/enableAuthenticator" class="btn btn-primary">Set up authenticator app</MudLink>
        <MudLink href="account/manage/resetAuthenticator" class="btn btn-primary">Reset authenticator app</MudLink>
    }
}
else {
    <div class="alert alert-danger">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <MudText>You must accept the policy before you can enable two factor authentication.</MudText>
    </div>
}

@code {
    private bool _canTrack;
    private bool _hasAuthenticator;
    private int _recoveryCodesLeft;
    private bool _is2FaEnabled;
    private bool _isMachineRemembered;

    [CascadingParameter] private HttpContext HttpContext{ get; set; } = default!;

    protected override async Task OnInitializedAsync() {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        _hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        _is2FaEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        _isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        _recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync() {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }

}