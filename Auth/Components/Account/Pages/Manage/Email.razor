@page "/account/manage/email"


@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<MudText Typo="Typo.h4">Manage email</MudText>

<StatusMessage Message="@_message"/>
<div class="row">
    <div class="col-md-6">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken/>
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            @if (_isEmailConfirmed) {
                <div class="form-floating mb-3 input-group">
                    <MudStaticTextField Value="_email" Label="Email" Placeholder="Please enter your email." Disabled/>
                    <div class="input-group-append">
                        <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                    </div>
                </div>
            }
            else {
                <div class="form-floating mb-3">
                    <MudStaticTextField Value="_email" Label="Email" Placeholder="Please enter your email." Disabled/>
                    <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info" form="send-verification-form">Send verification email</MudStaticButton>
                </div>
            }
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.NewEmail" autocomplete="email" aria-required="true"
                                    InputMode="InputMode.email" InputType="InputType.Email" Label="New email"
                                    Required="true" Placeholder="Please enter new email." For="() => Input.NewEmail"/>
            </div>
            <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info">Change email</MudStaticButton>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private string? _email;
    private bool _isEmailConfirmed;

    [CascadingParameter] private HttpContext HttpContext{ get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input{ get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _email = await UserManager.GetEmailAsync(_user);
        _isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(_user);

        Input.NewEmail ??= _email;
    }

    private async Task OnValidSubmitAsync() {
        if (Input.NewEmail is null || Input.NewEmail == _email) {
            _message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(_user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(_user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync() {
        if (_email is null) {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(_user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(_user, _email, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail{ get; set; }
    }

}