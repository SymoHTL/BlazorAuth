@page "/account/manage/changePassword"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<MudText Typo="Typo.h4">Change password</MudText>
<StatusMessage Message="@_message"/>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.OldPassword" autocomplete="current-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Old password"
                                    Required="true" For="() => Input.OldPassword" Placeholder="Please enter your old password."/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.NewPassword" autocomplete="new-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="New password"
                                    Required="true" For="() => Input.NewPassword" Placeholder="Please enter your new password."/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.ConfirmPassword" autocomplete="current-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Confirm password"
                                    Required="true" For="() => Input.ConfirmPassword" Placeholder="Please confirm your new password."/>
            </div>
            <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info">Update password</MudStaticButton>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private bool _hasPassword;

    [CascadingParameter] private HttpContext HttpContext{ get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input{ get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _hasPassword = await UserManager.HasPasswordAsync(_user);
        if (!_hasPassword) {
            RedirectManager.RedirectTo("account/manage/setPassword");
        }
    }

    private async Task OnValidSubmitAsync() {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded) {
            _message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        Logger.LogInformation("User changed their password successfully");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword{ get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword{ get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword{ get; set; } = "";
    }

}