@page "/account/manage"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<MudText Typo="Typo.h4">Profile</MudText>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <MudStaticTextField Value="_username" autocomplete="username" Label="Username" Placeholder="Please choose your username." Disabled/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.PhoneNumber" InputMode="InputMode.tel" InputType="InputType.Telephone"
                                    autocomplete="phone-number" Label="Phone number" Placeholder="Please enter your phone number."/>
            </div>
            <MudStaticButton Variant="Variant.Filled" Color="Color.Info">Save</MudStaticButton>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser _user = default!;
    private string? _username;
    private string? _phoneNumber;

    [CascadingParameter] private HttpContext HttpContext{ get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input{ get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync() {
        if (Input.PhoneNumber != _phoneNumber) {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded) {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber{ get; set; }
    }

}