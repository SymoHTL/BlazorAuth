@page "/account/manage/deletePersonalData"

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@_message"/>

<MudText Typo="Typo.h4">Delete Personal Data</MudText>

<MudAlert Severity="Severity.Error">
    <MudText>
        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
    </MudText>
</MudAlert>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        @if (_requirePassword) {
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.Password" autocomplete="current-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Password"
                                    Required="true" For="() => Input.Password" Placeholder="Please enter your password."/>
            </div>
        }
        <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Error">Delete data and close my account</MudStaticButton>
    </EditForm>
</div>

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private bool _requirePassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _requirePassword = await UserManager.HasPasswordAsync(_user);
    }

    private async Task OnValidSubmitAsync() {
        if (_requirePassword && !await UserManager.CheckPasswordAsync(_user, Input.Password)) {
            _message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(_user);
        if (!result.Succeeded) {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(_user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel {
        [DataType(DataType.Password)] public string Password { get; set; } = "";
    }

}