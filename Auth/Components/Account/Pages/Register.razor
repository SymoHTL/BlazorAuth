@page "/account/register"

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<MudText Typo="Typo.h2">Register</MudText>


<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <MudText Typo="Typo.h3">Create a new account.</MudText>
            <MudDivider/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.Username" autocomplete="username" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Text" Label="Username"
                                    Required="true" Placeholder="username" For="() => Input.Username"/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.Email" autocomplete="email" aria-required="true"
                                    InputMode="InputMode.email" InputType="InputType.Email" Label="Email address"
                                    Required="true" Placeholder="name@example.com" For="() => Input.Email"/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.Password" autocomplete="new-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Password"
                                    Required="true" For="() => Input.Password"/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.ConfirmPassword" autocomplete="new-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Confirm Password"
                                    Required="true" For="() => Input.ConfirmPassword"/>
            </div>
            <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info">Register</MudStaticButton>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <MudText Typo="Typo.h3">Use another service to register.</MudText>
            <MudDivider/>
            <ExternalLoginPicker/>
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input{ get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl{ get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext) {
        var user = new ApplicationUser();

        await UserStore.SetUserNameAsync(user,  Input.Username, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded) {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("account/confirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount) {
            RedirectManager.RedirectTo(
                "account/registerConfirmation",
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore() {
        if (!UserManager.SupportsUserEmail) {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel {
        [Required]
        [Display(Name = "Username")]
        public string Username{ get; set; } = "";
        
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email{ get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password{ get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword{ get; set; } = "";
    }

}