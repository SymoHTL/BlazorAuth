@page "/account/resetPassword"

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudText Typo="Typo.h2">Reset password</MudText>
<MudText Typo="Typo.h3">Reset your password.</MudText>
<MudDivider/>
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>

            <input type="hidden" name="Input.Code" value="@Input.Code"/>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.Email" autocomplete="email" aria-required="true"
                                    InputMode="InputMode.email" InputType="InputType.Email" Label="Email address"
                                    Required="true" Placeholder="name@example.com" For="() => Input.Email"/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.Password" autocomplete="new-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Password"
                                    Required="true" For="() => Input.Password" Placeholder="Please enter your password."/>
            </div>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.ConfirmPassword" autocomplete="new-password" aria-required="true"
                                    InputMode="InputMode.text" InputType="InputType.Password" Label="Confirm password"
                                    Required="true" For="() => Input.ConfirmPassword" Placeholder="Please confirm your password."/>
            </div>
            <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info">Reset</MudStaticButton>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input{ get; set; } = new();

    [SupplyParameterFromQuery] private string? Code{ get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized() {
        if (Code is null) {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync() {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null) {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded) {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        _identityErrors = result.Errors;
    }

    private sealed class InputModel {
        [Required] [EmailAddress] public string Email{ get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password{ get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword{ get; set; } = "";

        [Required] public string Code{ get; set; } = "";
    }

}