@page "/account/loginWithRecoveryCode"

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Recovery code verification</PageTitle>

<MudText Typo="Typo.h4">Recovery code verification</MudText>
<MudDivider/>
<StatusMessage Message="@_message"/>
<MudText>
    You have requested to log in with a recovery code. This login will not be remembered until you provide
    an authenticator app code at log in or disable 2FA and log in again.
</MudText>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <MudStaticTextField @bind-Value="Input.RecoveryCode" autocomplete="off" Placeholder="RecoveryCode" Label="Authenticator code"
                                    For="() => Input.RecoveryCode"/>
            </div>
            <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info">Log in</MudStaticButton>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private ApplicationUser _user = default!;

    [SupplyParameterFromForm] private InputModel Input{ get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl{ get; set; }

    protected override async Task OnInitializedAsync() {
        // Ensure the user has gone through the username & password screen first
        _user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync() {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(_user);

        if (result.Succeeded) {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut) {
            Logger.LogWarning("User account locked out");
            RedirectManager.RedirectTo("account/lockout");
        }
        else {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            _message = "Error: Invalid recovery code entered.";
        }
    }

    private sealed class InputModel {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string RecoveryCode{ get; set; } = "";
    }

}