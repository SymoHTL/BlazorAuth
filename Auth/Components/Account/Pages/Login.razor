@page "/account/login"

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h4">Log in</MudText>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@_errorMessage"/>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <MudText Typo="Typo.h6">Use a local account to log in.</MudText>
                <MudDivider/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <MudStaticTextField @bind-Value="Input.Email" autocomplete="email" aria-required="true"
                                        InputMode="InputMode.email" InputType="InputType.Email" Label="Email address"
                                        Required="true" Placeholder="name@example.com" For="() => Input.Email"/>
                </div>
                <div class="mb-3">
                    <MudStaticTextField @bind-Value="Input.Password" autocomplete="current-password" aria-required="true"
                                        InputMode="InputMode.text" InputType="InputType.Password" Label="Password"
                                        Required="true" For="() => Input.Password"/>
                </div>
                <div class="mb-3">
                    <MudStaticCheckBox @bind-Value="Input.RememberMe" Label="Remember me"/>
                </div>
                <div>
                    <MudStaticButton Variant="Variant.Filled" FullWidth="true" Color="Color.Info">Log in</MudStaticButton>
                </div>
                <div>
                    <MudLink href="account/forgotPassword">Forgot your password?</MudLink>
                    <br/>
                    <MudLink href="@(NavigationManager.GetUriWithQueryParameters("account/register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink>
                    <br/>
                    <MudLink href="account/resendEmailConfirmation">Resend email confirmation</MudLink>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <MudText Typo="Typo.h5">Use another service to log in.</MudText>
            <MudDivider/>
            <ExternalLoginPicker/>
        </section>
    </div>
</div>

@code {
    private string? _errorMessage;

    [CascadingParameter] private HttpContext HttpContext{ get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input{ get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl{ get; set; }

    protected override async Task OnInitializedAsync() {
        if (HttpMethods.IsGet(HttpContext.Request.Method)) {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser() {
        
        var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);
        if (user == null) {
            _errorMessage = "Error: Invalid login attempt.";
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded) {
            Logger.LogInformation("User logged in");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor) {
            RedirectManager.RedirectTo(
                "account/loginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut) {
            Logger.LogWarning("User account locked out");
            RedirectManager.RedirectTo("account/lockout");
        }
        else {
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel {
        [Required] [EmailAddress] public string Email{ get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password{ get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe{ get; set; }
    }

}